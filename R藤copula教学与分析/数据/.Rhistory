1+1
library(readxl)
library(readxl)
install readxl
install.packages(readxl)
install.packages("readxl")
install.packages("tseries")
rm(list = ls())
library(readxl)
library(tseries)
library(pastecs)
stat.desc()#导入数据
dst = read_xlsx("data_America.xlsx")
summary(dst)
ndaq = as.ts(dst[,2])
ibov = as.ts(dst[,3])
setwd("C:/Users/bryanlzs/Desktop/R藤copula教程")
setwd("C:/Users/bryanlzs/Desktop/R藤copula教程/数据")
rm(list = ls())
library(readxl)
library(tseries)
library(FinTS)
#导入数据
data = read_xlsx("data.xlsx")
data_series = ts(data[,2:6])
ret_series = log(data_series/lag(data_series,1L))
ret_series
#将数据里六个时间序列分别取出
m1 = as.ts(ret_series[,1])
m2 = as.ts(ret_series[,2])
m3 = as.ts(ret_series[,3])
m4 = as.ts(ret_series[,4])
m5 = as.ts(ret_series[,5])
#构建arma-garch模型
library(rugarch)
spec_m1 <- ugarchspec(variance.model = list(model = "sGARCH",
garchOrder = c(1, 1),
submodel = NULL,
external.regressors = NULL,
variance.targeting = FALSE),
mean.model     = list(armaOrder = c(1, 0),
external.regressors = NULL),
distribution.model="sstd",
start.pars = list(),
fixed.pars = list())
garch_m1 <- ugarchfit(spec = spec_m1, data = m1, solver.control = list(trace=0))
spec_m2 <- ugarchspec(variance.model = list(model = "sGARCH",
garchOrder = c(1, 1),
submodel = NULL,
external.regressors = NULL,
variance.targeting = FALSE),
mean.model     = list(armaOrder = c(1, 0),
external.regressors = NULL),
distribution.model="sstd",
start.pars = list(),
fixed.pars = list())
garch_m2 <- ugarchfit(spec = spec_m2, data = m2, solver.control = list(trace=0))
spec_m3 <- ugarchspec(variance.model = list(model = "sGARCH",
garchOrder = c(1, 1),
submodel = NULL,
external.regressors = NULL,
variance.targeting = FALSE),
mean.model     = list(armaOrder = c(0, 1),
external.regressors = NULL),
distribution.model="sstd",
start.pars = list(),
fixed.pars = list())
garch_m3 <- ugarchfit(spec = spec_m3, data = m3, solver.control = list(trace=0))
spec_m4 <- ugarchspec(variance.model = list(model = "sGARCH",
garchOrder = c(1, 1),
submodel = NULL,
external.regressors = NULL,
variance.targeting = FALSE),
mean.model     = list(armaOrder = c(2, 2),
external.regressors = NULL),
distribution.model="sstd",
start.pars = list(),
fixed.pars = list())
garch_m4 <- ugarchfit(spec = spec_m4, data = m4, solver.control = list(trace=0))
spec_m5 <- ugarchspec(variance.model = list(model = "sGARCH",
garchOrder = c(1, 1),
submodel = NULL,
external.regressors = NULL,
variance.targeting = FALSE),
mean.model     = list(armaOrder = c(0, 1),
external.regressors = NULL),
distribution.model="sstd",
start.pars = list(),
fixed.pars = list())
garch_m5 <- ugarchfit(spec = spec_m5, data = m5, solver.control = list(trace=0))
sigma_matrix = matrix(data = c(garch_m1@fit$sigma,garch_m2@fit$sigma,garch_m3@fit$sigma,
garch_m4@fit$sigma,garch_m5@fit$sigma),
nrow = length(garch_m1@fit$sigma),ncol = 5,byrow=FALSE)
residual_matrix = matrix(data = c(garch_m1@fit$residuals,garch_m2@fit$residuals,garch_m3@fit$residuals,
garch_m4@fit$residuals,garch_m5@fit$residuals),
nrow = length(garch_m1@fit$residuals),ncol = 5,byrow=FALSE)
#计算Copula
std_sigma_matrix = matrix(nrow = 486,ncol = 5)
copuladata = matrix(nrow = 486,ncol = 5)
for (i in c(1:5)) {
std_sigma_matrix[,i] = residual_matrix[,i]/sigma_matrix[,i]
f = ecdf(as.numeric(std_sigma_matrix[,i]))
copuladata[,i] = f(std_sigma_matrix[,i])
}
ks.test(copuladata[,1], "pnorm")
ks.test(copuladata[,2], "pnorm")
ks.test(copuladata[,3], "pnorm")
ecdf(m1)
sigma_matrix = matrix(data = c(garch_m1@fit$sigma,garch_m2@fit$sigma,garch_m3@fit$sigma,
garch_m4@fit$sigma,garch_m5@fit$sigma),
nrow = length(garch_m1@fit$sigma),ncol = 5,byrow=FALSE)
residual_matrix = matrix(data = c(garch_m1@fit$residuals,garch_m2@fit$residuals,garch_m3@fit$residuals,
garch_m4@fit$residuals,garch_m5@fit$residuals),
nrow = length(garch_m1@fit$residuals),ncol = 5,byrow=FALSE)
#计算Copula
std_sigma_matrix = matrix(nrow = 486,ncol = 5)
copuladata = matrix(nrow = 486,ncol = 5)
for (i in c(1:5)) {
std_sigma_matrix[,i] = residual_matrix[,i]/sigma_matrix[,i]
f = ecdf(as.numeric(std_sigma_matrix[,i]))
copuladata[,i] = f(std_sigma_matrix[,i])
}
copuladata
library(VineCopula)
library(copula)
library(CDVine)
RVM = RVineStructureSelect(copuladata,c(1:6),progress = TRUE,se = TRUE,method = 'itau')
Rst = RVineStructureSelect(copuladata,family = c(1:6),progress = TRUE,se = TRUE,method = 'itau')
summary(RVM)
RVineTreePlot(RVM)
RVineTreePlot(RVM)
contour(RVM)
summary(RVM)
RVM$pair.AIC
RVM$pair.logLik
RVM$tau
